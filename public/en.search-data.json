{"/_index.zh-cn/":{"data":{"":"\r快速且功能全面\r简单易用，功能强大丰富。\nMarkdown 写作\r只需使用 Markdown 进行编辑。多样的 Shortcode 组件开箱即用。\n全文搜索\r内置 FlexSearch 全文搜索，无需额外设置。\n轻如羽毛\r使用 Hextra 无需依赖 Node.js。由 Hugo 提供支持，Hugo 是最快的静态网站生成器之一，只需一个二进制文件即可在数秒内创建网站。\n响应式布局，暗黑模式\r适应不同的屏幕尺寸。内置暗黑模式支持，并根据用户的系统偏好自动切换。\n免费构建和托管\r使用 GitHub Actions 进行构建，并在 GitHub Pages 上免费托管。也可以托管在任何静态托管服务上。\n多语言轻松实现\r仅需通过在 Markdown 文件后添加语言代码即可创建多语言页面。向您的站点添加 i18n 支持直观易行。\n还有更多...\r代码高亮 / 目录 / SEO / RSS / LaTeX 公式 / Mermaid 图标 / 自定义 / 等等…"},"title":"Hextra 主题"},"/about/":{"data":{"":"","credits#Credits":"Hextra is designed to be a simple, fast, and flexible theme for building modern static websites. It is especially well-suited for documentation websites but can also be used for various types of sites, such as blogs, portfolios, and more.\nHugo, like Jekyll, is a static site generator. What sets Hugo apart is that it is a single binary, making it easy to install and run on various platforms. It is also extremely fast and reliable, capable of rendering a site with thousands of pages in milliseconds.\nHextra is built with a mindset focused on having a minimal footprint. To get started, no extra dependencies like Node.js packages are required; all you need is a single YAML configuration file, along with your Markdown content. Thus, we can focus on writing quality content instead of setting up tooling.\nCredits\rHextra cannot be built without the following tools and inspirations:\nHugo Tailwind CSS Heroicons Nextra Next.js "},"title":"About"},"/blog/":{"data":{"":" "},"title":"Blog"},"/blog/_index.fa/":{"data":{"":" "},"title":"وبلاگ"},"/blog/_index.zh-cn/":{"data":{"":" "},"title":"博客"},"/blog/first/":{"data":{"":"","1-把别人的仓库变成自己的#1 把别人的仓库变成自己的":"1.1 克隆原仓库到本地\rgit clone https://github.com/原作者/原仓库.git cd 原仓库 # 进入克隆的目录\r1.2 移除原远程仓库关联删除默认的 origin远程\rgit remote remove origin\r1.3 在 GitHub 创建新仓库\r登录 GitHub → “+” → “New repository” 不要勾选 “Add a README file”（保持空仓库） 获取新仓库的 URL（如 https://github.com/你的用户名/新仓库名.git） 1.4 关联自己的远程仓库\rgit remote add origin https://github.com/你的用户名/新仓库名.git\r1.5 重命名分支（可选但推荐）\rgit branch -M main # 将默认分支改为 main（或其他名称）\r1.6 推送所有分支到新仓库\rgit push -u origin --all # 推送所有分支","2-新增删除修改本地仓库文件该如何同步到远程以删除为例#2 新增/删除/修改本地仓库文件，该如何同步到远程（以删除为例）":"2.1 命令行删除\r2.1.1 进入仓库目录\rcd /path/to/your/repo\r2.1.2 删除文件夹（比如名为 ‘old-dir’）\rgit rm -r old-dir\r2.1.3 提交变更\rgit commit -m \"Remove old-dir\"\r2.1.4 推送到GitHub\rgit push origin main\r2.2 手动删除\r若你直接通过资源管理器删除了文件夹，Git 会检测到该变更。你可以使用以下命令来提交。\n# 进入仓库 cd /path/to/your/repo # 暂存所有变更 git add --all git commit -m \"Manually removed folder\" git push origin main"},"title":"First"}}